@page "/semester"
@inject SemesterRepository SemesterRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using NotenManager.Repository
@using NotenManager.Model

<PageTitle>Semester</PageTitle>


    <h1 class="page-title">
        Welches Semesters:
    </h1>
     
    <div class="m-3 p-2 border rounded border border-5">
    <div class="container-fluid">
        <section class="createSection">
            @*Create Methode-----------------------------*@
            <label for="semester" class="form-label">Welches Semester:</label>
            <input type="text" class="form-control" id="semester" @bind="newSemesterItem" placeholder="erster Semester" />
            <button class="btn btn-primary" type="submit" onclick="@CreateSemester">Add</button>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <p>@errorMessage</p>
            }
        </section>
        <section class="itemList">
        @*GetALl Methode ----------Show_List---------*@
            @foreach (var semesterItem in semesterListe)
            { 
                    <div class="d-flex gap-2 mb-2">
                        <button class="btn btn-outline-secondary" @onclick="() => NavToSub(semesterItem.Id)">
                            @semesterItem.SemesterNumber
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteSemester(semesterItem.Id)">Delete</button>
                    </div>
            }
        </section>
        </div>
    </div>

@code {
    //Create ------------------------------------------
    string? newSemesterItem;
    string errorMessage  =string.Empty;
    private async Task CreateSemester()
    {

        if (string.IsNullOrWhiteSpace(newSemesterItem) || !int.TryParse(newSemesterItem, out int semesterNumber))
        {
            errorMessage = "Bitte eine gültige Zahl eingeben";
            return;
        }

        errorMessage = ""; // zurücksetzten von Errorhandling
        var semester = new SemesterModel { SemesterNumber = semesterNumber };
        await SemesterRepo.Create(semester);
        semesterListe = SemesterRepo.GetAll().ToList();  // Liste Aktualisiern
        newSemesterItem = ""; // Eingabe leeren
    }

    //GetAll ------------------------------------------
    private List<SemesterModel> semesterListe = new();
    protected override void OnInitialized()
    {
        semesterListe =  SemesterRepo.GetAll().ToList();
    }

    //Navigation to Subject----------------------------------
    private void NavToSub(int Id)
    {
        Navigation.NavigateTo($"/subject/{Id}");
    }

    // Delete -----------------------------------------
    private void DeleteSemester(int Id)
    {
        SemesterRepo.Delete(Id);
        semesterListe = SemesterRepo.GetAll().ToList();
    }
}