@page "/grade/{SubjectId:int}"
@inject GradeRepository GradeRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using NotenManager.Model
@using NotenManager.Repository
@using Microsoft.AspNetCore.Components

<PageTitle>Grades</PageTitle>

<h1 class="pageTitle">Deine Noten:</h1>

<div class="m-3 p-3 border rounded border border-5">

    <div class="container-fluid">
        <sectin>
        @*Create Methode-----------------------------*@
            <label for="date" class="form-label">Datum:</label>
            <input type="date" class="form-control" id="date" @bind="newGrade.Date" />

            <label for="maxPoints" class="form-label">Maximal Punkte:</label>
            <input type="number" class="form-control" id="maxPoints" @bind="newGrade.MaxPoints" />

            <label for="points" class="form-label">Erreichte Punkte:</label>
            <input type="number" class="form-control" id="points" @bind="newGrade.AchivedPoints" />
        
            <label for="weighting" class="form-label">Gewichtung:</label>
            <input type="number" class="form-control" id="weighting" @bind="newGrade.Weighting" placeholder="100%" />
        
            <label for="comment" class="form-label">Komentare:</label>
            <input type="text" class="form-control" id="comment" @bind="newGrade.Comment" />
            <br />
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <p class="error-message">@errorMessage</p>
            }

            <button class="mt-4 mb-2 p-3 btn btn-primary" @onclick="CreateGrade">Note Speichern</button>
           
        </sectin>
        @*GetAll-----------------------------------------*@

        <section>
            @foreach (var gradeItem in gradeList)
            {
                <div class="grade-item p-2 mb-2 border rounded" style="background-color:@GetGradeColor(gradeItem.Grade)">
                    <p>
                        Datum: <span class="grade-value">@gradeItem.Date.ToShortDateString()</span><br />
                        Punkte: <span class="grade-value">@gradeItem.AchivedPoints / @gradeItem.MaxPoints Punkte</span>
                        (Gewichtung: <span class="grade-value">@gradeItem.Weighting</span>)
                    </p>

                    @*Wenn Kommentar vorhanden*@
                    @if (!string.IsNullOrWhiteSpace(gradeItem.Comment))
                    {
                        <p>
                            Kommentar: <span class="grade-value"> @gradeItem.Comment</span>
                        </p>
                    }
                    @*Durchschnitts note von der liste*@
                    <p>
                        Note: <span class="grade-value">@gradeItem.Grade</span>
                    </p>
                    <button class="btn btn-outline-danger" @onclick="() => DeleteGrade(gradeItem.Id)">Delete</button>
                </div>
        }
        </section>

        <p class="total-grade" style="background-color:@GetGradeColor(totalGrade ?? 0)">
            Gesamtnote (@totalGrade): 
        </p>


    </div>
</div>


@code {
    // Getall------------------------------------------
    [Parameter]
    public int SubjectId { get; set; }

    private double? totalGrade;

    private List<GradeModel> gradeList = new();
    protected override void OnParametersSet()
    {
        gradeList = GradeRepo.GetBySubject(SubjectId).ToList();
        totalGrade = GradeRepo.CalcTotalGrade(SubjectId);
    }

    //Create -----------with Grade Calculation-------------------------------
    string? errorMessage;
    GradeModel newGrade = new GradeModel { Weighting = 100, Date = DateTime.Today }; //default for Weighting is 100% and Date is today 


    private async Task CreateGrade()   
    {
        if (newGrade.MaxPoints <= 0)
        {
            errorMessage = "Maximalpunkte muss grösser sein als 0.";
            return;
        }

        if (newGrade.AchivedPoints < 0)
        {
            errorMessage = "ErreichtePunkte muss grösser sein als 0.";
            return;
        }

        if (newGrade.AchivedPoints > newGrade.MaxPoints)
        {
            errorMessage = "Erreichte Punkte dürfen nicht größer als Maximalpunkte sein.";
            return;
        }

        if (newGrade.Weighting <= 0)
        {
            errorMessage = "Gewichtung muss grösser als 0 sein.";
            return;
        }

        if (newGrade.MaxPoints > 0)
        {
            newGrade.Grade = (newGrade.AchivedPoints * 5.0) / newGrade.MaxPoints + 1;
        }

        errorMessage = null; // Vorherige Fehlermeldung löschen, wenn alles okey ist. 

        newGrade.SubjectId = SubjectId; // Verbindung zum Fach setzen
        await GradeRepo.Create(newGrade); 
        gradeList = GradeRepo.GetBySubject(SubjectId).ToList();
        totalGrade = GradeRepo.CalcTotalGrade(SubjectId);
        newGrade = new GradeModel { Weighting = 100, Date = DateTime.Today }; // Formular leeren
    }

    //Delete------------------------------------
    private void DeleteGrade(int Id)
    {
        GradeRepo.Delete(Id);
        gradeList = GradeRepo.GetBySubject(SubjectId).ToList();
    }

    //Grade status Color
    private string GetGradeColor(double grade)
    {
        if (grade >= 4.6) return "#C8EFA1"; // sehr gut: Grün
        if (grade >= 4) return "#FCF4C0"; // befriedigt: gelb
        if (grade <= 3.99) return "#E08484"; // unbefriedig: rot
        return "8b0000";
    }
}