@page "/grade/{SubjectId:int}"
@inject GradeRepository GradeRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using NotenManager.Model
@using NotenManager.Repository
@using Microsoft.AspNetCore.Components

<PageTitle>Grades</PageTitle>

<h1 class="pageTitle">Deine Noten:</h1>

<div class="m-3 p-3 border rounded border border-5">

    <div class="container-fluid">
        @*Create Methode-----------------------------*@
        <label for="date" class="form-label">Datum:</label>
        <input type="date" class="form-control" id="date" @bind="newGrade.Date" />

        <label for="maxPoints" class="form-label">Maximal Punkte:</label>
        <input type="number" class="form-control" id="maxPoints" @bind="newGrade.MaxPoints" />

        <label for="points" class="form-label">Erreichte Punkte:</label>
        <input type="number" class="form-control" id="points" @bind="newGrade.AchivedPoints" />
        
        <label for="weighting" class="form-label">Gewichtung:</label>
        <input type="number" class="form-control" id="weighting" @bind="newGrade.Weighting" placeholder="100%" />
        
        <label for="comment" class="form-label">Komentare:</label>
        <input type="text" class="form-control" id="comment" @bind="newGrade.Comment" />

        <button class="mt-4 mb-2 p-3 btn btn-primary" @onclick="CreateGrade">Note Speichern</button>
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <p>@errorMessage</p>
        }

        @*GetAll-----------------------------------------*@

        <section>
            @foreach (var gradeItem in gradeList)
            {
            <p>Note am: @gradeItem.Date.ToShortDateString():
                Punkte:
            @gradeItem.AchivedPoints / @gradeItem.MaxPoints Punkte
            (Gewichtung: @gradeItem.Weighting)
            </p>
            @*Durchschnitts note von der liste*@
                <p>@gradeItem.Grade</p>
                <button class="btn btn-outline-danger" @onclick="() => DeleteGrade(gradeItem.Id)">Delete</button>
        }
        </section>

        <p class="mt-4 mb-2 p-3 rounded bg-secondary">Gesamtnote (@totalGrade): </p>


    </div>
</div>


@code {
    // Getall------------------------------------------
    [Parameter]
    public int SubjectId { get; set; }

    private double? totalGrade;

    private List<GradeModel> gradeList = new();
    protected override void OnParametersSet()
    {
        gradeList = GradeRepo.GetBySubject(SubjectId).ToList();
        totalGrade = GradeRepo.CalcTotalGrade(SubjectId);
    }

    //Create -----------with Grade Calculation-------------------------------
    string? errorMessage;

    GradeModel newGrade = new() { Weighting = 100 };


    private async Task CreateGrade()   
    {
        if (newGrade.MaxPoints <= 0)
        {
            errorMessage = "Maximalpunkte muss grösser sein als 0.";
            return;
        }

        if (newGrade.AchivedPoints < 0)
        {
            errorMessage = "ErreichtePunkte muss grösser sein als 0.";
            return;
        }

        if (newGrade.AchivedPoints > newGrade.MaxPoints)
        {
            errorMessage = "Erreichte Punkte dürfen nicht größer als Maximalpunkte sein.";
            return;
        }

        if (newGrade.Weighting <= 0)
        {
            errorMessage = "Gewichtung muss grösser als 0 sein.";
            return;
        }

        if (newGrade.MaxPoints > 0)
        {
            newGrade.Grade = (newGrade.AchivedPoints * 5.0) / newGrade.MaxPoints + 1;
        }

        errorMessage = null; // Vorherige Fehlermeldung löschen, wenn alles okey ist. 

        newGrade.SubjectId = SubjectId; // Verbindung zum Fach setzen
        await GradeRepo.Create(newGrade); 
        gradeList = GradeRepo.GetBySubject(SubjectId).ToList();
        totalGrade = GradeRepo.CalcTotalGrade(SubjectId);
        newGrade = new(); // Formular leeren
    }
  
    //Delete------------------------------------
    private void DeleteGrade(int Id)
    {
        GradeRepo.Delete(Id);
        gradeList = GradeRepo.GetBySubject(SubjectId).ToList();
    }
}